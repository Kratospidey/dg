{
  "layout": "docs",
  "data": [],
  "body": {
    "raw": "\n```C++\n\n#include <iostream>\n\n#include <stack>\n\n#include <string>\n\n#include <cmath>\n\n  \n\ndouble calculate(std::string postfix) {\n\n    std::stack<double> st;\n\n    for (int i = 0; i < postfix.length(); i++) {\n\n        if (postfix[i] >= '0' && postfix[i] <= '9') {\n\n            st.push((double)(postfix[i] - '0'));\n\n        } else {\n\n            double num1 = st.top(); st.pop();\n\n            double num2 = st.top(); st.pop();\n\n            switch (postfix[i]) {\n\n                case '+':\n\n                    st.push(num2 + num1);\n\n                    break;\n\n                case '-':\n\n                    st.push(num2 - num1);\n\n                    break;\n\n                case '*':\n\n                    st.push(num2 * num1);\n\n                    break;\n\n                case '/':\n\n                    st.push(num2 / num1);\n\n                    break;\n\n                case '^':\n\n                    st.push(pow(num2,num1));\n\n                    break;\n\n            }\n\n        }\n\n    }\n\n    return st.top();\n\n}\n\n  \n\nint main() {\n\n    std::string postfix = \"23*5+\";\n\n    std::cout << \"The value of the postfix expression '\" << postfix << \"' is: \" << calculate(postfix) << std::endl;\n\n    return 0;\n\n}\n\n```",
    "code": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var t=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var x=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),f=(s,e)=>{for(var c in e)l(s,c,{get:e[c],enumerable:!0})},d=(s,e,c,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of N(e))!u.call(s,a)&&a!==c&&l(s,a,{get:()=>e[a],enumerable:!(i=h(e,a))||i.enumerable});return s};var b=(s,e,c)=>(c=s!=null?m(t(s)):{},d(e||!s||!s.__esModule?l(c,\"default\",{value:s,enumerable:!0}):c,s)),g=s=>d(l({},\"__esModule\",{value:!0}),s);var p=x((C,o)=>{o.exports=_jsx_runtime});var _={};f(_,{default:()=>k});var n=b(p());function r(s){let e=Object.assign({pre:\"pre\",code:\"code\",span:\"span\"},s.components);return(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"language-C++ code-highlight\",children:[(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <iostream>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <stack>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <string>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <cmath>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`double calculate(std::string postfix) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 std::stack<double> st;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 for (int i = 0; i < postfix.length(); i++) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 if (postfix[i] >= '0' && postfix[i] <= '9') {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 st.push((double)(postfix[i] - '0'));\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 } else {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 double num1 = st.top(); st.pop();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 double num2 = st.top(); st.pop();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 switch (postfix[i]) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 case '+':\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 st.push(num2 + num1);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 break;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 case '-':\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 st.push(num2 - num1);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 break;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 case '*':\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 st.push(num2 * num1);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 break;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 case '/':\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 st.push(num2 / num1);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 break;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 case '^':\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 st.push(pow(num2,num1));\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 break;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 return st.top();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`int main() {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 std::string postfix = \"23*5+\";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 std::cout << \"The value of the postfix expression '\" << postfix << \"' is: \" << calculate(postfix) << std::endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 return 0;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`})]})})}function j(s={}){let{wrapper:e}=s.components||{};return e?(0,n.jsx)(e,Object.assign({},s,{children:(0,n.jsx)(r,s)})):r(s)}var k=j;return g(_);})();\n;return Component;"
  },
  "_id": "College/Sem IV/Content/Simple Postfix Calculator.md",
  "_raw": {
    "sourceFilePath": "College/Sem IV/Content/Simple Postfix Calculator.md",
    "sourceFileName": "Simple Postfix Calculator.md",
    "sourceFileDir": "College/Sem IV/Content",
    "contentType": "markdown",
    "flattenedPath": "College/Sem IV/Content/Simple Postfix Calculator"
  },
  "type": "Page",
  "url_path": "College/Sem IV/Content/Simple Postfix Calculator",
  "slug": "Simple Postfix Calculator"
}