{
  "layout": "docs",
  "data": [],
  "body": {
    "raw": "\n```C++\n\n#include <iostream>\n\n#include <stack>\n\n#include <string>\n\n#include <cctype>\n\nusing namespace std;\n\n  \n\nint prec(char a)\n\n{\n\n    if (a == '^')\n\n    {\n\n        return 3;\n\n    }\n\n    else if (a == '*' || a == '/')\n\n    {\n\n        return 2;\n\n    }\n\n    else if (a == '+' || a == '-')\n\n    {\n\n        return 1;\n\n    }\n\n    else\n\n    {\n\n        return -1;\n\n    }\n\n}\n\n  \n\nint main()\n\n{\n\n    stack<int> operators;\n    \n\n    string infix;\n\n    cout << \"Enter an infix mathematical equation\" << endl;\n\n    std::getline(std::cin, infix);\n\n\n    int len = infix.length();\n\n    string output;\n\n\n    for (int i = 0; i < len; i++)\n\n    {\n\n        if (infix[i] != ' ')\n\n        {\n\n            if (isdigit(infix[i]))\n\n            {\n\n                output += infix[i];\n\n            }\n\n            else if (infix[i] == '(')\n\n            {\n\n                operators.push(infix[i]);\n\n            }\n\n            else if (operators.empty() || operators.top() == '(')\n\n            {\n\n                operators.push(infix[i]);\n\n            }\n\n            else if (infix[i] == ')')\n\n            {\n\n                while (operators.top() != '(')\n\n                {\n\n                    output += operators.top();\n\n                    operators.pop();\n\n                }\n\n                operators.pop();\n\n            }\n\n            else\n\n            {\n\n                while (!operators.empty() && prec(infix[i]) <= prec(operators.top()))\n\n                {\n\n                    output += operators.top();\n\n                    operators.pop();\n\n                }\n\n                operators.push(infix[i]);\n\n            }\n\n        }\n\n    }\n\n  \n\n    while (!operators.empty())\n\n    {\n\n        output += operators.top();\n\n        operators.pop();\n\n    }\n\n  \n\n    cout << output << endl;\n\n}\n\n```\n\n___\n",
    "code": "var Component=(()=>{var h=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var t=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),x=(s,e)=>{for(var a in e)l(s,a,{get:e[a],enumerable:!0})},d=(s,e,a,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of N(e))!u.call(s,c)&&c!==a&&l(s,c,{get:()=>e[c],enumerable:!(i=m(e,c))||i.enumerable});return s};var g=(s,e,a)=>(a=s!=null?h(t(s)):{},d(e||!s||!s.__esModule?l(a,\"default\",{value:s,enumerable:!0}):a,s)),j=s=>d(l({},\"__esModule\",{value:!0}),s);var r=f((M,o)=>{o.exports=_jsx_runtime});var w={};x(w,{default:()=>y});var n=g(r());function p(s){let e=Object.assign({pre:\"pre\",code:\"code\",span:\"span\",hr:\"hr\"},s.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"language-C++ code-highlight\",children:[(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <iostream>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <stack>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <string>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <cctype>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`using namespace std;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`int prec(char a)\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`{\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 if (a == '^')\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 return 3;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 else if (a == '*' || a == '/')\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 return 2;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 else if (a == '+' || a == '-')\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 return 1;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 else\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 return -1;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`int main()\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`{\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 stack<int> operators;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 string infix;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"Enter an infix mathematical equation\" << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 std::getline(std::cin, infix);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 int len = infix.length();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 string output;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 for (int i = 0; i < len; i++)\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 if (infix[i] != ' ')\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 if (isdigit(infix[i]))\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 output += infix[i];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 else if (infix[i] == '(')\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 operators.push(infix[i]);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 else if (operators.empty() || operators.top() == '(')\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 operators.push(infix[i]);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 else if (infix[i] == ')')\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 while (operators.top() != '(')\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 output += operators.top();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 operators.pop();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 operators.pop();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 else\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 while (!operators.empty() && prec(infix[i]) <= prec(operators.top()))\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 output += operators.top();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 operators.pop();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 operators.push(infix[i]);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 while (!operators.empty())\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 output += operators.top();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 operators.pop();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << output << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`})]})}),`\n`,(0,n.jsx)(e.hr,{})]})}function _(s={}){let{wrapper:e}=s.components||{};return e?(0,n.jsx)(e,Object.assign({},s,{children:(0,n.jsx)(p,s)})):p(s)}var y=_;return j(w);})();\n;return Component;"
  },
  "_id": "College/Sem IV/Content/Infix to Postfix.md",
  "_raw": {
    "sourceFilePath": "College/Sem IV/Content/Infix to Postfix.md",
    "sourceFileName": "Infix to Postfix.md",
    "sourceFileDir": "College/Sem IV/Content",
    "contentType": "markdown",
    "flattenedPath": "College/Sem IV/Content/Infix to Postfix"
  },
  "type": "Page",
  "url_path": "College/Sem IV/Content/Infix to Postfix",
  "slug": "Infix to Postfix"
}