{
  "layout": "docs",
  "data": [],
  "body": {
    "raw": "\n```C++\n\n#include <iostream>\nusing namespace std;\n\nclass Stack {\n    public:\n    int arr[100], top;\n\n\n    Stack() {\n        this->top = -1;\n    }\n\n    //Auxilary functions\n\n    bool IsEmpty() {\n        if (this->top == -1){\n            return true;\n        }\n        return false;\n    }\n\n    bool IsFull() {\n        if (this->top == 99){\n            return true;\n        }\n        return false;\n    }\n\n    void Size(){\n        cout<<\"Size: \"<<top + 1<<endl<<endl;\n        return ;\n    }\n\n    void Peek(){\n        if (IsEmpty()){\n            cout<<\"Stack is empty\"<<endl;\n            return ;\n        }\n        cout<<\"Topmost element: \"<<arr[top]<<endl<<endl;\n        return ;\n    }\n\n    //Main functions\n\n    bool Push(int a){\n        if (IsFull()) {\n            cout<<\"Stack is already full\"<<endl;\n            return false;\n        }\n        top++;\n        arr[top] = a;\n        return true;\n    }\n\n    bool Pop () {\n        if (IsEmpty()){\n            cout<<\"Stack is already empty\"<<endl;\n            return false;\n        }\n        top--;\n        return true;\n    }\n\n    void Display() {\n        cout<<\"Stack: \"<<endl;\n        for (int i = top; i >= 0; i--){\n            cout<<arr[i]<<endl;\n        }\n        cout<<endl;\n    }\n\n};\n\nint main(){\n    Stack a;\n    int n;\n    cout<<\"Enter base-10 number: \"<<endl;\n    cin>>n;\n    while (n > 0){\n        a.Push(n % 2);\n        n = n / 2;\n    }\n    while (!a.IsEmpty()){\n        cout<<a.arr[a.top];\n        a.Pop();\n    }\n    cout<<endl;\n    return 0;\n}\n\n```\n\n",
    "code": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var t=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),y=(a,e)=>{for(var s in e)l(a,s,{get:e[s],enumerable:!0})},d=(a,e,s,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of N(e))!u.call(a,c)&&c!==s&&l(a,c,{get:()=>e[c],enumerable:!(i=h(e,c))||i.enumerable});return a};var b=(a,e,s)=>(s=a!=null?m(t(a)):{},d(e||!a||!a.__esModule?l(s,\"default\",{value:a,enumerable:!0}):s,a)),x=a=>d(l({},\"__esModule\",{value:!0}),a);var o=f((I,r)=>{r.exports=_jsx_runtime});var g={};y(g,{default:()=>k});var n=b(o());function p(a){let e=Object.assign({pre:\"pre\",code:\"code\",span:\"span\"},a.components);return(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"language-C++ code-highlight\",children:[(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <iostream>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`using namespace std;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`class Stack {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    public:\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    int arr[100], top;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    Stack() {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        this->top = -1;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    //Auxilary functions\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    bool IsEmpty() {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        if (this->top == -1){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`            return true;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        return false;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    bool IsFull() {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        if (this->top == 99){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`            return true;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        return false;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    void Size(){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        cout<<\"Size: \"<<top + 1<<endl<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        return ;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    void Peek(){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        if (IsEmpty()){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`            cout<<\"Stack is empty\"<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`            return ;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        cout<<\"Topmost element: \"<<arr[top]<<endl<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        return ;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    //Main functions\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    bool Push(int a){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        if (IsFull()) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`            cout<<\"Stack is already full\"<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`            return false;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        top++;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        arr[top] = a;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        return true;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    bool Pop () {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        if (IsEmpty()){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`            cout<<\"Stack is already empty\"<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`            return false;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        top--;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        return true;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    void Display() {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        cout<<\"Stack: \"<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        for (int i = top; i >= 0; i--){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`            cout<<arr[i]<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        cout<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`};\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`int main(){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    Stack a;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    int n;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    cout<<\"Enter base-10 number: \"<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    cin>>n;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    while (n > 0){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        a.Push(n % 2);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        n = n / 2;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    while (!a.IsEmpty()){\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        cout<<a.arr[a.top];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`        a.Pop();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    cout<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`    return 0;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`})]})})}function S(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(p,a)})):p(a)}var k=S;return x(g);})();\n;return Component;"
  },
  "_id": "College/Sem IV/Content/Decimal to Binary convertor using Stacks.md",
  "_raw": {
    "sourceFilePath": "College/Sem IV/Content/Decimal to Binary convertor using Stacks.md",
    "sourceFileName": "Decimal to Binary convertor using Stacks.md",
    "sourceFileDir": "College/Sem IV/Content",
    "contentType": "markdown",
    "flattenedPath": "College/Sem IV/Content/Decimal to Binary convertor using Stacks"
  },
  "type": "Page",
  "url_path": "College/Sem IV/Content/Decimal to Binary convertor using Stacks",
  "slug": "Decimal to Binary convertor using Stacks"
}