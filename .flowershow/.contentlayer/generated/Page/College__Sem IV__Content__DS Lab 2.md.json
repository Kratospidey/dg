{
  "layout": "docs",
  "data": [],
  "body": {
    "raw": "\n**Name:** [Param Makwana](mailto:paramsinghmakwana@gmail.com)                                                                                                                                                     \n\n**Roll No:** F004\n\n**Batch:** F1\n\n**Date:** 03-01-23\n\n___\n\n# Aim:  To study One-Dimensional Array\n\n## Problem Statement:\nImplement below problem statements using C++\n\n1.  Write a program to insert a new element in a given array\n\n```C++\n\n#include <iostream>\n\nusing namespace std;\n\nint main()\n\n{\n\n    int size;    \n\n    int element;  \n\n    int position;\n\n    cout << \"Enter the number of elements in the array: \";\n\n    cin >> size;\n\n    // creating a dynamically allocated array as the array needs to expand and using vector isn't an option_\n\n    int *array = new int[size];\n\n    for (int i = 0; i < size; i++)\n\n    {\n\n        cout << \"Enter element at position [\" << i + 1 << \"] \";\n\n        cin >> array[i];\n\n    }\n\n    cout << \"Enter the element to be inserted: \";\n\n    cin >> element;\n\n    cout << \"Enter the position to insert the element at (0-based index): \";\n\n    cin >> position;\n\n    for (int i = size; i > position; i--)\n\n    {\n\n        array[i] = array[i - 1];\n\n    }\n\n    array[position] = element;\n\n    size++;\n\n    cout << \"Modified array: \";\n\n    for (int i = 0; i < size; i++)\n\n    {\n\n        cout << array[i] << \" \";\n\n    }\n\n    cout << endl;\n\n    delete[] array;\n\n    return 0;\n\n}\n\n```\n\n___\n2. Write a program to delete an element from an array\n\n```C++\n\n#include <iostream>\n\nusing namespace std;\n\nconst int MAX_SIZE = 100;\n\nint main() {\n\n  int array[MAX_SIZE];\n\n  int size;\n\n  int position;\n\n  cout << \"Enter the number of elements in the array: \";\n\n  cin >> size;\n\n  cout << \"Enter the elements of the array: \";\n\n  for (int i = 0; i < size; i++) {\n\n    cout << \"Enter element at position [\" << i + 1 << \"] \";\n\n    cin >> array[i];\n\n  }\n\n  cout << \"Enter the position of the element to be deleted (0-based index): \";\n\n  cin >> position;\n\n  for (int i = position; i < size - 1; i++) {\n\n    array[i] = array[i + 1];\n\n  }\n\n  size--;\n\n  cout << \"Modified array: \";\n\n  for (int i = 0; i < size; i++) {\n\n    cout << array[i] << \" \";\n\n  }\n\n  cout << endl;\n\n  return 0;\n\n}\n\n```\n\n___\n\n3.  For both the programs, traverse the array before and after the operations\n\n___\n",
    "code": "var Component=(()=>{var m=Object.create;var c=Object.defineProperty;var t=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var N=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var g=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),y=(a,e)=>{for(var l in e)c(a,l,{get:e[l],enumerable:!0})},d=(a,e,l,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!u.call(a,s)&&s!==l&&c(a,s,{get:()=>e[s],enumerable:!(i=t(e,s))||i.enumerable});return a};var f=(a,e,l)=>(l=a!=null?m(N(a)):{},d(e||!a||!a.__esModule?c(l,\"default\",{value:a,enumerable:!0}):l,a)),b=a=>d(c({},\"__esModule\",{value:!0}),a);var o=g((E,r)=>{r.exports=_jsx_runtime});var w={};y(w,{default:()=>x});var n=f(o());function h(a){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",hr:\"hr\",h1:\"h1\",h2:\"h2\",svg:\"svg\",path:\"path\",ol:\"ol\",li:\"li\",pre:\"pre\",code:\"code\",span:\"span\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Name:\"}),\" \",(0,n.jsx)(e.a,{href:\"mailto:paramsinghmakwana@gmail.com\",children:\"Param Makwana\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Roll No:\"}),\" F004\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Batch:\"}),\" F1\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Date:\"}),\" 03-01-23\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h1,{id:\"aim-to-study-one-dimensional-array\",children:\"Aim:\\xA0 To study One-Dimensional Array\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"problem-statement\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#problem-statement\",children:(0,n.jsx)(e.svg,{xmlns:\"http://www.w3.org/2000/svg\",fill:\"#ab2b65\",viewBox:\"0 0 20 20\",className:\"w-5 h-5\",children:(0,n.jsx)(e.path,{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M9.493 2.853a.75.75 0 00-1.486-.205L7.545 6H4.198a.75.75 0 000 1.5h3.14l-.69 5H3.302a.75.75 0 000 1.5h3.14l-.435 3.148a.75.75 0 001.486.205L7.955 14h2.986l-.434 3.148a.75.75 0 001.486.205L12.456 14h3.346a.75.75 0 000-1.5h-3.14l.69-5h3.346a.75.75 0 000-1.5h-3.14l.435-3.147a.75.75 0 00-1.486-.205L12.045 6H9.059l.434-3.147zM8.852 7.5l-.69 5h2.986l.69-5H8.852z\"})})}),\"Problem Statement:\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Implement below problem statements using C++\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Write a program to insert a new element in a given array\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"language-C++ code-highlight\",children:[(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <iostream>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`using namespace std;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`int main()\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`{\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 int size; \\xA0 \\xA0\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 int element; \\xA0\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 int position;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"Enter the number of elements in the array: \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cin >> size;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 // creating a dynamically allocated array as the array needs to expand and using vector isn't an option_\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 int *array = new int[size];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 for (int i = 0; i < size; i++)\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cout << \"Enter element at position [\" << i + 1 << \"] \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cin >> array[i];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"Enter the element to be inserted: \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cin >> element;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"Enter the position to insert the element at (0-based index): \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cin >> position;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 for (int i = size; i > position; i--)\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 array[i] = array[i - 1];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 array[position] = element;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 size++;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"Modified array: \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 for (int i = 0; i < size; i++)\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cout << array[i] << \" \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 delete[] array;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 return 0;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`})]})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Write a program to delete an element from an array\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"language-C++ code-highlight\",children:[(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <iostream>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`using namespace std;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`const int MAX_SIZE = 100;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`int main() {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 int array[MAX_SIZE];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 int size;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 int position;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 cout << \"Enter the number of elements in the array: \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 cin >> size;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 cout << \"Enter the elements of the array: \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 for (int i = 0; i < size; i++) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"Enter element at position [\" << i + 1 << \"] \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cin >> array[i];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 cout << \"Enter the position of the element to be deleted (0-based index): \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 cin >> position;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 for (int i = position; i < size - 1; i++) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 array[i] = array[i + 1];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 size--;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 cout << \"Modified array: \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 for (int i = 0; i < size; i++) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << array[i] << \" \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 cout << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 return 0;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`})]})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsx)(e.li,{children:\"For both the programs, traverse the array before and after the operations\"}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{})]})}function z(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(h,a)})):h(a)}var x=z;return b(w);})();\n;return Component;"
  },
  "_id": "College/Sem IV/Content/DS Lab 2.md",
  "_raw": {
    "sourceFilePath": "College/Sem IV/Content/DS Lab 2.md",
    "sourceFileName": "DS Lab 2.md",
    "sourceFileDir": "College/Sem IV/Content",
    "contentType": "markdown",
    "flattenedPath": "College/Sem IV/Content/DS Lab 2"
  },
  "type": "Page",
  "url_path": "College/Sem IV/Content/DS Lab 2",
  "slug": "DS Lab 2"
}