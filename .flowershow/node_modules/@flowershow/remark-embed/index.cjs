'use strict';

var unistUtilVisit = require('unist-util-visit');

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

function transformer(tree) {
  unistUtilVisit.visit(tree, "paragraph", function (node) {
    unistUtilVisit.visit(node, "text", function (textNode) {
      if (textNode.value.includes("https://www.youtube.com") && !textNode.value.includes("\n")) {
        var urlSplit = textNode.value.split(/[=&]+/);
        var iframeUrl = "https://www.youtube.com/embed/".concat(urlSplit[1]);
        Object.assign(node, _objectSpread2(_objectSpread2({}, node), {}, {
          type: "element",
          data: {
            hProperties: {
              style: "position:relative;padding-bottom:56.25%"
            }
          },
          children: [_objectSpread2(_objectSpread2({}, textNode), {}, {
            type: "element",
            tagName: "iframe",
            data: {
              hName: "iframe",
              hProperties: {
                style: "position:absolute;top:0;left:0;width:100%;height:100%",
                src: iframeUrl,
                allowfullscreen: true,
                frameborder: "0",
                allow: "accelerometer autoplay clipboard-write encrypted-media gyroscope picture-in-picture"
              }
            }
          })]
        }));
      }
    });
  });
}
function attacher() {
  return transformer;
}

module.exports = attacher;
