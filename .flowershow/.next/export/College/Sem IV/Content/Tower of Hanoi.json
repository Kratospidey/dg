{"pageProps":{"layout":"docs","data":[],"body":{"raw":"\n```c++\n#include <iostream>\n\n#include <stack>\n\nusing namespace std;\n\n  \n\nconst int NUM_DISKS = 3;\n\nstack<int> towers[3];\n\nint moves = 0;\n\n  \n\nvoid moveDisk(int from, int to) {\n\n    int disk = towers[from].top();\n\n    towers[from].pop();\n\n    towers[to].push(disk);\n\n    moves++;\n\n    cout << \"Move disk \" << disk << \" from tower \" << from+1 << \" to tower \" << to+1 << endl;\n\n}\n\n  \n  \n  \n\nvoid printTowers() {\n\n    for (int i = 0; i < 3; i++) {\n\n        cout << \"Tower \" << i+1 << \": \";\n\n        stack<int> tower = towers[i];\n\n        while (!tower.empty()) {\n\n            cout << tower.top() << \" \";\n\n            tower.pop();\n\n        }\n\n        cout << endl;\n\n    }\n\n}\n\n  \n\nint main()\n\n{\n\n  \n\n    for (int i = NUM_DISKS; i > 0; i--) {\n\n        towers[0].push(i);\n\n    }\n\n  \n\n    int from, to;\n\n    cout << \"Tower of Hanoi innit \" << endl;\n\n    cout << \"Enter the number of the tower you want to move a disk from,\" << endl;\n\n    cout << \"followed by the number of the tower you want to move the disk to.\" << endl;\n\n  \n\n    while (towers[2].size() != NUM_DISKS) {\n\n        printTowers();\n\n        cout << \"Moves made: \" << moves << endl;\n\n        cout << \"Enter the tower to move disk from: \";\n\n        cin >> from;\n\n        cout << \"Enter the tower to move disk to: \";\n\n        cin >> to;\n\n        if(from < 1 || from > 3 || to < 1 || to > 3) cout << \"Invalid input, Please enter between 1-3\" << endl;\n\n        else if(towers[from-1].empty()) cout << \"No disk in this tower!\" << endl;\n\n        else if(!towers[to-1].empty() && towers[from-1].top() > towers[to-1].top()) cout << \"Can't put bigger disk on top of smaller disk!\" << endl;\n\n        else moveDisk(from-1, to-1);\n\n    }\n\n  \n\n    cout << \"You have successfully completed the game in \" << moves << \" moves!\" << endl;\n\n    cout<<\"Big brain person can do it in just a single move tho\"<<endl;\n\n    return 0;\n\n}\n```\n","code":"var Component=(()=>{var p=Object.create;var l=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var t=Object.getOwnPropertyNames;var N=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var w=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),f=(s,e)=>{for(var c in e)l(s,c,{get:e[c],enumerable:!0})},d=(s,e,c,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of t(e))!u.call(s,a)&&a!==c&&l(s,a,{get:()=>e[a],enumerable:!(i=h(e,a))||i.enumerable});return s};var v=(s,e,c)=>(c=s!=null?p(N(s)):{},d(e||!s||!s.__esModule?l(c,\"default\",{value:s,enumerable:!0}):c,s)),k=s=>d(l({},\"__esModule\",{value:!0}),s);var r=w((x,o)=>{o.exports=_jsx_runtime});var b={};f(b,{default:()=>_});var n=v(r());function m(s){let e=Object.assign({pre:\"pre\",code:\"code\",span:\"span\"},s.components);return(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"language-c++ code-highlight\",children:[(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <iostream>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`#include <stack>\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`using namespace std;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`const int NUM_DISKS = 3;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`stack<int> towers[3];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`int moves = 0;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`void moveDisk(int from, int to) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 int disk = towers[from].top();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 towers[from].pop();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 towers[to].push(disk);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 moves++;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"Move disk \" << disk << \" from tower \" << from+1 << \" to tower \" << to+1 << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`void printTowers() {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 for (int i = 0; i < 3; i++) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cout << \"Tower \" << i+1 << \": \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 stack<int> tower = towers[i];\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 while (!tower.empty()) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 cout << tower.top() << \" \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 tower.pop();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cout << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`int main()\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`{\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 for (int i = NUM_DISKS; i > 0; i--) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 towers[0].push(i);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 int from, to;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"Tower of Hanoi innit \" << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"Enter the number of the tower you want to move a disk from,\" << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"followed by the number of the tower you want to move the disk to.\" << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 while (towers[2].size() != NUM_DISKS) {\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 printTowers();\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cout << \"Moves made: \" << moves << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cout << \"Enter the tower to move disk from: \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cin >> from;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cout << \"Enter the tower to move disk to: \";\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 cin >> to;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 if(from < 1 || from > 3 || to < 1 || to > 3) cout << \"Invalid input, Please enter between 1-3\" << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 else if(towers[from-1].empty()) cout << \"No disk in this tower!\" << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 else if(!towers[to-1].empty() && towers[from-1].top() > towers[to-1].top()) cout << \"Can't put bigger disk on top of smaller disk!\" << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 \\xA0 \\xA0 else moveDisk(from-1, to-1);\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 }\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`  \n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout << \"You have successfully completed the game in \" << moves << \" moves!\" << endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 cout<<\"Big brain person can do it in just a single move tho\"<<endl;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\xA0 \\xA0 return 0;\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`}\n`})]})})}function g(s={}){let{wrapper:e}=s.components||{};return e?(0,n.jsx)(e,Object.assign({},s,{children:(0,n.jsx)(m,s)})):m(s)}var _=g;return k(b);})();\n;return Component;"},"_id":"College/Sem IV/Content/Tower of Hanoi.md","_raw":{"sourceFilePath":"College/Sem IV/Content/Tower of Hanoi.md","sourceFileName":"Tower of Hanoi.md","sourceFileDir":"College/Sem IV/Content","contentType":"markdown","flattenedPath":"College/Sem IV/Content/Tower of Hanoi"},"type":"Page","url_path":"College/Sem IV/Content/Tower of Hanoi","slug":"Tower of Hanoi","authorsDetails":[],"globals":{}},"__N_SSG":true}